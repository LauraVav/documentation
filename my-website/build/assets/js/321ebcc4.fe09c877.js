"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5944],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,f=p["".concat(u,".").concat(d)]||p[d]||c[d]||l;return t?r.createElement(f,o(o({ref:n},m),{},{components:t})):r.createElement(f,o({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=p;var i={};for(var u in n)hasOwnProperty.call(n,u)&&(i[u]=n[u]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},8215:function(e,n,t){var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},6396:function(e,n,t){t.d(n,{Z:function(){return p}});var r=t(7462),a=t(7294),l=t(2389),o=t(9443);var i=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=t(9521),s=t(6010),m="tabItem_1uMI";function c(e){var n,t,r,l=e.lazy,o=e.block,c=e.defaultValue,p=e.values,d=e.groupId,f=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=p?p:g.map((function(e){var n=e.props;return{value:n.value,label:n.label}})),v=(0,u.lx)(b,(function(e,n){return e.value===n.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===c?c:null!=(n=null!=c?c:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(r=g[0])?void 0:r.props.value;if(null!==k&&!b.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var y=i(),h=y.tabGroupChoices,N=y.setTabGroupChoices,w=(0,a.useState)(k),P=w[0],O=w[1],j=[],T=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=d){var E=h[d];null!=E&&E!==P&&b.some((function(e){return e.value===E}))&&O(E)}var I=function(e){var n=e.currentTarget,t=j.indexOf(n),r=b[t].value;r!==P&&(T(n),O(r),null!=d&&N(d,r))},S=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r=j.indexOf(e.currentTarget)+1;t=j[r]||j[0];break;case"ArrowLeft":var a=j.indexOf(e.currentTarget)-1;t=j[a]||j[j.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":o},f)},b.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:P===n?0:-1,"aria-selected":P===n,className:(0,s.Z)("tabs__item",m,{"tabs__item--active":P===n}),key:n,ref:function(e){return j.push(e)},onKeyDown:S,onFocus:I,onClick:I},null!=t?t:n)}))),l?(0,a.cloneElement)(g.filter((function(e){return e.props.value===P}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==P})}))))}function p(e){var n=(0,l.Z)();return a.createElement(c,(0,r.Z)({key:String(n)},e))}},9443:function(e,n,t){var r=(0,t(7294).createContext)(void 0);n.Z=r},7336:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return m},metadata:function(){return c},toc:function(){return p},default:function(){return f}});var r=t(7462),a=t(3366),l=(t(7294),t(3905)),o=t(6396),i=t(8215),u=["components"],s={sidebar_position:3},m="Synthesis",c={unversionedId:"API/synthesis",id:"version-1.0/API/synthesis",isDocsHomePage:!1,title:"Synthesis",description:"Compiles all the most relevant information for each token.",source:"@site/versioned_docs/version-1.0/API/synthesis.md",sourceDirName:"API",slug:"/API/synthesis",permalink:"/documentation/docs/1.0/API/synthesis",tags:[],version:"1.0",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"version-1.0/tutorialSidebar",previous:{title:"Lettria Sentence Object",permalink:"/documentation/docs/1.0/API/lettria-sentence-object"},next:{title:"Lemmatizer",permalink:"/documentation/docs/1.0/API/lemmitizer"}},p=[{value:"Synthesis Token Object",id:"synthesis-token-object",children:[],level:2}],d={toc:p};function f(e){var n=e.components,s=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},d,s,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"synthesis"},"Synthesis"),(0,l.kt)("p",null,"Compiles all the most relevant information for each token."),(0,l.kt)("p",null,"Go back to the ",(0,l.kt)("a",{parentName:"p",href:"https://www.lettria.com/documentation/docs/API/lettria-sentence-object"},"Sentence Object"),"."),(0,l.kt)("h2",{id:"synthesis-token-object"},"Synthesis Token Object"),(0,l.kt)("p",null,"Links in this section will redirect you to their origin in the given sub-api."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"KEY"),(0,l.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,l.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,l.kt)("th",{parentName:"tr",align:null},"CONSTRAINTS"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Describes the type of entity found"),(0,l.kt)("td",{parentName:"tr",align:null},"For ",(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/Glossary/tags"},"proper nouns"),", can either be LOCATION or PERSON. For other entities, see ",(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/Glossary/entities"},"Entity types"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"lemma"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"lemma of the word"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"meaning"),(0,l.kt)("td",{parentName:"tr",align:null},"list of ",(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/Glossary/categories"},"Category Objects")),(0,l.kt)("td",{parentName:"tr",align:null},"Known meanings for the item"),(0,l.kt)("td",{parentName:"tr",align:null},"Can be empty.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tag"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"see ",(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/Glossary/tags"},"Tags")),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/ner#value-object"},"Value Object")),(0,l.kt)("td",{parentName:"tr",align:null},"Value for numeral entities"),(0,l.kt)("td",{parentName:"tr",align:null},"Can be Null")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"source"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"original string input related to the token"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nlp"),(0,l.kt)("td",{parentName:"tr",align:null},"list of ",(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/nlp"},"NLP Objects")),(0,l.kt)("td",{parentName:"tr",align:null},"if NULL refer to nlp_items"),(0,l.kt)("td",{parentName:"tr",align:null},"Can be Null")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nlp_items"),(0,l.kt)("td",{parentName:"tr",align:null},"list of ",(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/nlp"},"NLP Objects")),(0,l.kt)("td",{parentName:"tr",align:null},'This is where you can find individual NLP informations when multiple tokens get merged to form one entity (example : "12" + "kg")'),(0,l.kt)("td",{parentName:"tr",align:null},"Can be Null")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"coreference"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://www.lettria.com/documentation/docs/API/coreference"},"Coreference Object")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"-")))),(0,l.kt)(o.Z,{mdxType:"Tabs"},(0,l.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'[\n  {\n    "type": null,\n    "lemma": "je",\n    "meaning": [\n      {\n        "sub": "Pronom",\n        "super": null\n      }\n    ],\n    "tag": "CLS",\n    "value": "S-1",\n    "source": "je",\n    "nlp": {\n      "lemmatizer": {\n        "confidence": 0.99,\n        "pronom": 1\n      },\n      "source": "je",\n      "tag": "CLS"\n    },\n    "nlp_items": null,\n    "coreference": {\n      "category": [\n        "human"\n      ],\n      "category_parent": [\n        "PERSON"\n      ],\n      "id": 0,\n      "lemma": "USER",\n      "source": "USER"\n    }\n  },\n  {\n    "type": null,\n    "lemma": "adorer",\n    "meaning": [\n      {\n        "sub": "sentiment_love",\n        "super": "SENTIMENT"\n      }\n    ],\n    "tag": "V",\n    "value": null,\n    "source": "adore",\n    "nlp": {\n      "lemmatizer": [\n        {\n          "confidence": 0.99,\n          "conjugate": [\n            {\n              "mode": "imperative",\n              "pronom": 2,\n              "temps": "present"\n            },\n            {\n              "mode": "indicative",\n              "pronom": 3,\n              "temps": "present"\n            },\n            {\n              "mode": "participe",\n              "pronom": -1,\n              "temps": "past"\n            },\n            {\n              "mode": "subjonctive",\n              "pronom": 3,\n              "temps": "present"\n            },\n            {\n              "mode": "indicative",\n              "pronom": 1,\n              "temps": "present"\n            },\n            {\n              "mode": "subjonctive",\n              "pronom": 1,\n              "temps": "present"\n            }\n          ],\n          "infinit": "adorer"\n        }\n      ],\n      "source": "adore",\n      "tag": "V"\n    },\n    "nlp_items": null,\n    "coreference": null\n  },\n  {\n    "type": null,\n    "lemma": "!",\n    "meaning": [],\n    "tag": "PUNCT",\n    "value": null,\n    "source": "!",\n    "nlp": {\n      "lemmatizer": {\n        "confidence": 0.79\n      },\n      "source": "!",\n      "tag": "PUNCT"\n    },\n    "nlp_items": null,\n    "coreference": null\n  }\n]\n'))),(0,l.kt)(i.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "type": null,\n    "lemma": "je",\n    "meaning": [\n      {\n        "sub": "Pronom",\n        "super": null\n      }\n    ],\n    "tag": "CLS",\n    "value": "S-1",\n    "source": "je",\n    "nlp": {\n      "lemmatizer": {\n        "confidence": 0.99,\n        "pronom": 1\n      },\n      "source": "je",\n      "tag": "CLS"\n    },\n    "nlp_items": null,\n    "coreference": {\n      "category": [\n        "human"\n      ],\n      "category_parent": [\n        "PERSON"\n      ],\n      "id": 0,\n      "lemma": "USER",\n      "source": "USER"\n    }\n  },\n  {\n    "type": null,\n    "lemma": "adorer",\n    "meaning": [\n      {\n        "sub": "sentiment_love",\n        "super": "SENTIMENT"\n      }\n    ],\n    "tag": "V",\n    "value": null,\n    "source": "adore",\n    "nlp": {\n      "lemmatizer": [\n        {\n          "confidence": 0.99,\n          "conjugate": [\n            {\n              "mode": "imperative",\n              "pronom": 2,\n              "temps": "present"\n            },\n            {\n              "mode": "indicative",\n              "pronom": 3,\n              "temps": "present"\n            },\n            {\n              "mode": "participe",\n              "pronom": -1,\n              "temps": "past"\n            },\n            {\n              "mode": "subjonctive",\n              "pronom": 3,\n              "temps": "present"\n            },\n            {\n              "mode": "indicative",\n              "pronom": 1,\n              "temps": "present"\n            },\n            {\n              "mode": "subjonctive",\n              "pronom": 1,\n              "temps": "present"\n            }\n          ],\n          "infinit": "adorer"\n        }\n      ],\n      "source": "adore",\n      "tag": "V"\n    },\n    "nlp_items": null,\n    "coreference": null\n  },\n  {\n    "type": null,\n    "lemma": "!",\n    "meaning": [],\n    "tag": "PUNCT",\n    "value": null,\n    "source": "!",\n    "nlp": {\n      "lemmatizer": {\n        "confidence": 0.79\n      },\n      "source": "!",\n      "tag": "PUNCT"\n    },\n    "nlp_items": null,\n    "coreference": null\n  }\n]\n')))),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://app.lettria.com/signup"},(0,l.kt)("img",{alt:"register-sticky",src:t(4209).Z}))))}f.isMDXComponent=!0},4209:function(e,n,t){n.Z=t.p+"assets/images/register-sticky-0bf1e35cb49b633a37ddd712c2cfde47.png"}}]);