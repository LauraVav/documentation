"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3174],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,y=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4754:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:1},p="Token Pattern",s={unversionedId:"Tutorials/Python SDK/Patterns/token-pattern",id:"version-2.0/Tutorials/Python SDK/Patterns/token-pattern",isDocsHomePage:!1,title:"Token Pattern",description:"Video",source:"@site/versioned_docs/version-2.0/Tutorials/Python SDK/Patterns/token-pattern.md",sourceDirName:"Tutorials/Python SDK/Patterns",slug:"/Tutorials/Python SDK/Patterns/token-pattern",permalink:"/documentation/docs/Tutorials/Python SDK/Patterns/token-pattern",tags:[],version:"2.0",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"version-2.0/tutorialSidebar",previous:{title:"Common Properties",permalink:"/documentation/docs/Tutorials/Python SDK/common-properties"},next:{title:"Dependency Pattern",permalink:"/documentation/docs/Tutorials/Python SDK/Patterns/dependency-pattern"}},u=[{value:"Video",id:"video",children:[],level:2},{value:"What are token patterns?",id:"what-are-token-patterns",children:[],level:2},{value:"Importing the library &amp; your personal API key",id:"importing-the-library--your-personal-api-key",children:[],level:2},{value:"Creating a pattern",id:"creating-a-pattern",children:[],level:2},{value:"Adding data",id:"adding-data",children:[],level:2},{value:"Extracting patterns",id:"extracting-patterns",children:[],level:2},{value:"Saving your results",id:"saving-your-results",children:[],level:2},{value:"Code set",id:"code-set",children:[],level:2}],c={toc:u};function d(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"token-pattern"},"Token Pattern"),(0,o.kt)("h2",{id:"video"},"Video"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/jOHqq0mwQ0o",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,o.kt)("h2",{id:"what-are-token-patterns"},"What are token patterns?"),(0,o.kt)("p",null,"Token patterns are simple patterns that do not use dependency parsing. They consist of a sequence of attribute related rules."),(0,o.kt)("h2",{id:"importing-the-library--your-personal-api-key"},"Importing the library & your personal API key"),(0,o.kt)("p",null,"After you've installed the Lettria package on Python you'll need to import the library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import lettria\n")),(0,o.kt)("p",null,"Next you are going to need to include your personal API key which can be found via the Lettria platform in the dashboard."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"api_key = 'your personal API key'\nnlp = lettria.NLP(api_key)\n")),(0,o.kt)("h2",{id:"creating-a-pattern"},"Creating a pattern"),(0,o.kt)("p",null,"In order to use token pattern you must first create the pattern."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'patterns = {\n    "patients":\n        [\n            {"POS":{"IN":["CD", "ENTITY"]}},\n            {"POS":{"IN":["RB", "JJ", "PUNCT", "ENTITY"]}, "OP":"*"},\n            {"LEMMA":"patient"}\n        ],\n    "date":\n        [\n            {"ENT_TYPE":"date"}\n        ]\n}\n')),(0,o.kt)("p",null,"Attributes are the properties of a token after analysis by the comprehension API. By defining an attribute in a pattern, only tokens that match the specific attribute will be matched."),(0,o.kt)("p",null,"Each attribute can map either to a single value or to a dictionary that allows modifiers for more complex behaviors."),(0,o.kt)("p",null,"Operators work similarly as regular expressions operators, they allow to choose how often should a token be matched."),(0,o.kt)("p",null,"To see a complete list of\xa0 attributes, modifiers and operators you can refer to our documentation."),(0,o.kt)("h2",{id:"adding-data"},"Adding data"),(0,o.kt)("p",null,"Next add the data you would like to analyzed. I am going to add text but you can also upload a saved file with the with open command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"example_data = \u201cexample text\u201d\n")),(0,o.kt)("p",null,"Next add the data to the NLP."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"nlp.add_document(example_data)\n")),(0,o.kt)("h2",{id:"extracting-patterns"},"Extracting patterns"),(0,o.kt)("p",null,"In order to extract the pattern I will add the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for s, matches in nlp.match_pattern(patterns, level='sentence'):\n    print(matches)\n")),(0,o.kt)("p",null,"In the return you will find the corresponding values based on the attribute, modifiers and operators defined in your pattern."),(0,o.kt)("h2",{id:"saving-your-results"},"Saving your results"),(0,o.kt)("p",null,"In order to save your results you can use the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"nlp.save_results(\u2018example_results')\n")),(0,o.kt)("p",null,"And a json file with your results that can be used for further analysis will be saved."),(0,o.kt)("h2",{id:"code-set"},"Code set"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import lettria\n\napi_key = \'your personal API key\'\nnlp = lettria.NLP(api_key)\n\npatterns = {\n    "patients":\n        [\n            {"POS":{"IN":["CD", "ENTITY"]}},\n            {"POS":{"IN":["RB", "JJ", "PUNCT", "ENTITY"]}, "OP":"*"},\n            {"LEMMA":"patient"}\n        ],\n    "date":\n        [\n            {"ENT_TYPE":"date"}\n        ]\n}\n\nexample_data = \u201cexample text\u201d\nnlp.add_document(example_data)\n\nfor s, matches in nlp.match_pattern(patterns, level=\'sentence\'):\n    print(matches)\n\nnlp.save_results(\u2018example_results\')\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://app.lettria.com/signup"},(0,o.kt)("img",{alt:"register-sticky",src:n(4209).Z}))))}d.isMDXComponent=!0},4209:function(e,t,n){t.Z=n.p+"assets/images/register-sticky-0bf1e35cb49b633a37ddd712c2cfde47.png"}}]);