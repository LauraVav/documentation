"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8132],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var u=a.createContext({}),m=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),s=m(n),c=l,g=s["".concat(u,".").concat(c)]||s[c]||d[c]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=s;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:l},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return s}});var a=n(7462),l=n(7294),r=n(2389),i=n(9443);var o=function(){var e=(0,l.useContext)(i.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},u=n(9521),m=n(6010),p="tabItem_1uMI";function d(e){var t,n,a,r=e.lazy,i=e.block,d=e.defaultValue,s=e.values,c=e.groupId,g=e.className,N=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=s?s:N.map((function(e){var t=e.props;return{value:t.value,label:t.label}})),b=(0,u.lx)(k,(function(e,t){return e.value===t.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===d?d:null!=(t=null!=d?d:null==(n=N.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(a=N[0])?void 0:a.props.value;if(null!==f&&!k.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=o(),v=h.tabGroupChoices,y=h.setTabGroupChoices,O=(0,l.useState)(f),j=O[0],P=O[1],T=[],E=(0,u.o5)().blockElementScrollPositionUntilNextRender;if(null!=c){var C=v[c];null!=C&&C!==j&&k.some((function(e){return e.value===C}))&&P(C)}var I=function(e){var t=e.currentTarget,n=T.indexOf(t),a=k[n].value;a!==j&&(E(t),P(a),null!=c&&y(c,a))},x=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=T.indexOf(e.currentTarget)+1;n=T[a]||T[0];break;case"ArrowLeft":var l=T.indexOf(e.currentTarget)-1;n=T[l]||T[T.length-1]}null==(t=n)||t.focus()};return l.createElement("div",{className:"tabs-container"},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,m.Z)("tabs",{"tabs--block":i},g)},k.map((function(e){var t=e.value,n=e.label;return l.createElement("li",{role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,className:(0,m.Z)("tabs__item",p,{"tabs__item--active":j===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:x,onFocus:I,onClick:I},null!=n?n:t)}))),r?(0,l.cloneElement)(N.filter((function(e){return e.props.value===j}))[0],{className:"margin-vert--md"}):l.createElement("div",{className:"margin-vert--md"},N.map((function(e,t){return(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}function s(e){var t=(0,r.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},9443:function(e,t,n){var a=(0,n(7294).createContext)(void 0);t.Z=a},5425:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return s},default:function(){return g}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),i=n(6396),o=n(8215),u=["components"],m={sidebar_position:6},p="NLC",d={unversionedId:"API/nlc",id:"API/nlc",isDocsHomePage:!1,title:"NLC",description:"Includes NER, NLP and NLU modules.",source:"@site/docs/API/nlc.md",sourceDirName:"API",slug:"/API/nlc",permalink:"/docs/API/nlc",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Disturbance",permalink:"/docs/API/disturbance"},next:{title:"Entities Numeral",permalink:"/docs/API/entities-numeral"}},s=[{value:"NER",id:"ner",children:[{value:"NER Object",id:"ner-object",children:[],level:3},{value:"Value Object",id:"value-object",children:[],level:3}],level:2},{value:"NLP",id:"nlp",children:[{value:"NLP Object",id:"nlp-object",children:[],level:3},{value:"Lemmatizer Object",id:"lemmatizer-object",children:[],level:3},{value:"Conjugate Object",id:"conjugate-object",children:[],level:3},{value:"Gender Object",id:"gender-object",children:[],level:3},{value:"Preposition sens Object",id:"preposition-sens-object",children:[],level:3}],level:2},{value:"NLU",id:"nlu",children:[{value:"NLU Object",id:"nlu-object",children:[],level:3}],level:2}],c={toc:s};function g(e){var t=e.components,n=(0,l.Z)(e,u);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"nlc"},"NLC"),(0,r.kt)("p",null,"Includes NER, NLP and NLU modules."),(0,r.kt)("h2",{id:"ner"},"NER"),(0,r.kt)("p",null,"The NER sub-api lists all the Numeral Entities and Named Entities found in the sentence."),(0,r.kt)("h3",{id:"ner-object"},"NER Object"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"CONSTRAINTS"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Describes the type of entity found"),(0,r.kt)("td",{parentName:"tr",align:null},"For proper nouns, can either be LOCATION or PERSON. For other entities, see Entity types")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value Object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h3",{id:"value-object"},"Value Object"),(0,r.kt)("p",null,"A value object can either be a numeric value for some adjectives, an entity value for entities, or a 'null' value for names."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'[\n  {\n    "source": "Paris",\n    "type": "LOCATION",\n    "value": null\n  },\n  {\n    "source": "12 mai",\n    "type": "date",\n    "value": {\n      "ISO": "2019-05-12",\n      "chronology": "future",\n      "chronology_day": 58,\n      "confidence": 0.99,\n      "formatted": "Sunday 12 May 2019 00:00:00",\n      "timestamp": 1557612000\n    }\n  }\n]\n'))),(0,r.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "source": "Paris",\n    "type": "LOCATION",\n    "value": null\n  },\n  {\n    "source": "12 mai",\n    "type": "date",\n    "value": {\n      "ISO": "2019-05-12",\n      "chronology": "future",\n      "chronology_day": 58,\n      "confidence": 0.99,\n      "formatted": "Sunday 12 May 2019 00:00:00",\n      "timestamp": 1557612000\n    }\n  }\n]\n')))),(0,r.kt)("h2",{id:"nlp"},"NLP"),(0,r.kt)("h3",{id:"nlp-object"},"NLP Object"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Words composing the token")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tag"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"see Tags")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lemmatizer"),(0,r.kt)("td",{parentName:"tr",align:null},"Lemmatizer Object"),(0,r.kt)("td",{parentName:"tr",align:null},"Object with information regarding lemma of token")))),(0,r.kt)("h3",{id:"lemmatizer-object"},"Lemmatizer Object"),(0,r.kt)("p",null,"The content of the lemmatizer object is different for each tag. The table bellow references all the keys that are available, and lists the tags that will return them (see POS Tagger and list of tags)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"CONSTRAINTS"),(0,r.kt)("th",{parentName:"tr",align:null},"TAGS"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"conjugate"),(0,r.kt)("td",{parentName:"tr",align:null},"list of Conjugate Objects"),(0,r.kt)("td",{parentName:"tr",align:null},"List possible conjugations"),(0,r.kt)("td",{parentName:"tr",align:null},"see Conjugations"),(0,r.kt)("td",{parentName:"tr",align:null},"V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"confidence"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"level of confidence in the results (higher is better)"),(0,r.kt)("td",{parentName:"tr",align:null},"0 <= confidence <= 1"),(0,r.kt)("td",{parentName:"tr",align:null},"(all)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gender"),(0,r.kt)("td",{parentName:"tr",align:null},"Gender Object"),(0,r.kt)("td",{parentName:"tr",align:null},"describes the gender and plurality"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"VP, JJ, N, D, PD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lemma"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"lemmatized version of the source"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"C, CC, CLO, CLS, D, JJ, N, NP, PUNCT, P, PD, PROREL, RB, RB_WH, SYM, UH")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"infinit"),(0,r.kt)("td",{parentName:"tr",align:null},"list of string"),(0,r.kt)("td",{parentName:"tr",align:null},"list of possible verb infinitives"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"V, VP")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"CD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"D, PD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"possessing"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"see Possessive determiners"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"D, PD")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pronom"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"see Pronouns"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"CLS")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"designation"),(0,r.kt)("td",{parentName:"tr",align:null},"list of string"),(0,r.kt)("td",{parentName:"tr",align:null},"see Categories"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"CLO")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"category"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"see Adverb Categories"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"RB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"RB, P")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sens"),(0,r.kt)("td",{parentName:"tr",align:null},"list of Preposition sens object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"P")))),(0,r.kt)("h3",{id:"conjugate-object"},"Conjugate Object"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pronom"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"see Pronouns")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"temps"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h3",{id:"gender-object"},"Gender Object"),(0,r.kt)("p",null,"Gives information about the gender and plurality of a word."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"CONSTRAINTS"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"female"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"true or false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"plural"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"true or false")))),(0,r.kt)("h3",{id:"preposition-sens-object"},"Preposition sens Object"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sens"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"see Preposition sens")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"category"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"see Preposition categories")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"next"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"see Preposition next")))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'[\n    {\n        "lemmatizer": {\n            "gender": {\n                "female": false,\n                "plural": false\n            },\n            "mode": "define",\n            "possessing": -1\n        },\n        "source": "le",\n        "tag": "D"\n    },\n    {\n        "lemmatizer": {\n            "confidence": "0.99",\n            "gender": {\n                "female": false,\n                "plural": false\n            },\n            "lemma": "chemin"\n        },\n        "source": "chemin",\n        "tag": "N"\n    },\n    {\n        "lemmatizer": [\n            {\n                "confidence": "0.99",\n                "conjugate": [\n                    {\n                        "mode": "indicative",\n                        "pronom": 3,\n                        "temps": "present"\n                    }\n                ],\n                "infinit": "etre"\n            }\n        ],\n        "source": "est",\n        "tag": "V"\n    },\n    {\n        "lemmatizer": {\n            "confidence": "0.99",\n            "gender": {\n                "female": false,\n                "plural": false\n            },\n            "lemma": "long"\n        },\n        "source": "long",\n        "tag": "JJ"\n    },\n    {\n        "source": ".",\n        "tag": "PUNCT"\n    }\n]\n'))),(0,r.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "lemmatizer": {\n            "gender": {\n                "female": false,\n                "plural": false\n            },\n            "mode": "define",\n            "possessing": -1\n        },\n        "source": "le",\n        "tag": "D"\n    },\n    {\n        "lemmatizer": {\n            "confidence": "0.99",\n            "gender": {\n                "female": false,\n                "plural": false\n            },\n            "lemma": "chemin"\n        },\n        "source": "chemin",\n        "tag": "N"\n    },\n    {\n        "lemmatizer": [\n            {\n                "confidence": "0.99",\n                "conjugate": [\n                    {\n                        "mode": "indicative",\n                        "pronom": 3,\n                        "temps": "present"\n                    }\n                ],\n                "infinit": "etre"\n            }\n        ],\n        "source": "est",\n        "tag": "V"\n    },\n    {\n        "lemmatizer": {\n            "confidence": "0.99",\n            "gender": {\n                "female": false,\n                "plural": false\n            },\n            "lemma": "long"\n        },\n        "source": "long",\n        "tag": "JJ"\n    },\n    {\n        "source": ".",\n        "tag": "PUNCT"\n    }\n]\n')))),(0,r.kt)("h2",{id:"nlu"},"NLU"),(0,r.kt)("p",null,"Understanding for each token in the sentence."),(0,r.kt)("h3",{id:"nlu-object"},"NLU Object"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"KEY"),(0,r.kt)("th",{parentName:"tr",align:null},"TYPE"),(0,r.kt)("th",{parentName:"tr",align:null},"DESCRIPTION"),(0,r.kt)("th",{parentName:"tr",align:null},"CONSTRAINTS"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Index in the initial tokenized sentence"),(0,r.kt)("td",{parentName:"tr",align:null},"index >= 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"len"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of tokens that have been merged (1 if no merge)"),(0,r.kt)("td",{parentName:"tr",align:null},"len >= 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"meaning"),(0,r.kt)("td",{parentName:"tr",align:null},"list of Category Objects"),(0,r.kt)("td",{parentName:"tr",align:null},"Known meanings for the item"),(0,r.kt)("td",{parentName:"tr",align:null},"Can be empty.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"source"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"if len is greater than one, will be the merged sources of original items")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"dict"),(0,r.kt)("td",{parentName:"tr",align:null},"Depends on tag. Most values are in the 'scalar' key of this dict"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py"},'[\n    {\n        "compose":[\n\n        ],\n        "index":0,\n        "len":1,\n        "meaning":[\n            "Pronom"\n        ],\n        "source":"je",\n        "value":"S-1"\n    },\n    {\n        "compose":[\n\n        ],\n        "index":1,\n        "infinit":[\n            "manger"\n        ],\n        "len":1,\n        "meaning":[\n            "action_feed",\n            "action_eat"\n        ],\n        "source":"mange",\n        "value":None,\n        "verb_meaning":{\n            "manger":[\n                "action_feed",\n                "action_eat"\n            ]\n        }\n    },\n    {\n        "compose":[\n\n        ],\n        "index":2,\n        "len":1,\n        "meaning":[\n            "Number"\n        ],\n        "source":"une",\n        "value":1\n    },\n    {\n        "compose":[\n\n        ],\n        "index":3,\n        "len":1,\n        "meaning":[\n            "color",\n            "firstname",\n            "fruit"\n        ],\n        "source":"pomme",\n        "value":None\n    }\n]\n'))),(0,r.kt)(o.Z,{value:"json",label:"JSON",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "compose":[\n\n        ],\n        "index":0,\n        "len":1,\n        "meaning":[\n            "Pronom"\n        ],\n        "source":"je",\n        "value":"S-1"\n    },\n    {\n        "compose":[\n\n        ],\n        "index":1,\n        "infinit":[\n            "manger"\n        ],\n        "len":1,\n        "meaning":[\n            "action_feed",\n            "action_eat"\n        ],\n        "source":"mange",\n        "value":None,\n        "verb_meaning":{\n            "manger":[\n                "action_feed",\n                "action_eat"\n            ]\n        }\n    },\n    {\n        "compose":[\n\n        ],\n        "index":2,\n        "len":1,\n        "meaning":[\n            "Number"\n        ],\n        "source":"une",\n        "value":1\n    },\n    {\n        "compose":[\n\n        ],\n        "index":3,\n        "len":1,\n        "meaning":[\n            "color",\n            "firstname",\n            "fruit"\n        ],\n        "source":"pomme",\n        "value":None\n    }\n]\n')))))}g.isMDXComponent=!0}}]);