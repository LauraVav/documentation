"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7664],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),y=a,m=c["".concat(s,".").concat(y)]||c[y]||u[y]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2032:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={sidebar_position:6},s="Dependency Parser",p={unversionedId:"Tutorials/API/dependency-parser",id:"version-1.0/Tutorials/API/dependency-parser",isDocsHomePage:!1,title:"Dependency Parser",description:"Video",source:"@site/versioned_docs/version-1.0/Tutorials/API/dependency-parser.md",sourceDirName:"Tutorials/API",slug:"/Tutorials/API/dependency-parser",permalink:"/documentation/docs/1.0/Tutorials/API/dependency-parser",tags:[],version:"1.0",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"version-1.0/tutorialSidebar",previous:{title:"Tokenizer",permalink:"/documentation/docs/1.0/Tutorials/API/tokenizer"},next:{title:"Emotion Analysis",permalink:"/documentation/docs/1.0/Tutorials/API/emotion-analysis"}},d=[{value:"Video",id:"video",children:[],level:2},{value:"Importing the library &amp; adding your personal API key",id:"importing-the-library--adding-your-personal-api-key",children:[],level:2},{value:"Adding your document",id:"adding-your-document",children:[],level:2},{value:"Extracting dependencies",id:"extracting-dependencies",children:[],level:2},{value:"Saving your results",id:"saving-your-results",children:[],level:2},{value:"Code set",id:"code-set",children:[],level:2}],u={toc:d};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dependency-parser"},"Dependency Parser"),(0,o.kt)("h2",{id:"video"},"Video"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/IM4DiieXCRY",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,o.kt)("h1",{id:"whats-a-dependency-parser"},(0,o.kt)("strong",{parentName:"h1"},"What\u2019s a dependency parser?")),(0,o.kt)("p",null,"A dependency parser or dependency analyzer highlights the ",(0,o.kt)("strong",{parentName:"p"},"dependency relationships in a sentence")," (what or who is the subject or object). It\u2019s a computational linguistics tool built on a group of rules specific to the analyzed language. A dependency parser can also be built based on a machine-learning model that derives grammatical rules from a manually-labelled corpus. ",(0,o.kt)("strong",{parentName:"p"},"What does it do? How does it work?"),"The parser organizes the elements of a sentence based on their syntactic and semantic importance, and the links that exist between them."),(0,o.kt)("h2",{id:"importing-the-library--adding-your-personal-api-key"},"Importing the library & adding your personal API key"),(0,o.kt)("p",null,"If you want to highlight the dependency relationships in a sentence from your document you'll need to have your document saved on your computer."),(0,o.kt)("p",null,"After you've installed the Lettria package on Python you'll need to import the library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import lettria\n")),(0,o.kt)("p",null,"Next you are going to need to include your personal API key which can be found"),(0,o.kt)("p",null,"via the Lettria platform in the dashboard."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"api_key = 'your personal API key'\nnlp = lettria.NLP(api_key)\n")),(0,o.kt)("h2",{id:"adding-your-document"},"Adding your document"),(0,o.kt)("p",null,"Now you will need to open your saved document. Be sure to add the name of"),(0,o.kt)("p",null,"\u2018your file\u2019 since it may differ from the name of the example file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'with open("example.txt", "r") as f:\n    example_data = f.readlines()\n')),(0,o.kt)("p",null,"Next add your document to the NLP."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"nlp.add_document(example_data)\n")),(0,o.kt)("h2",{id:"extracting-dependencies"},"Extracting dependencies"),(0,o.kt)("p",null,"Next you will need to print the tokens with their corresponding reference and dependency."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"print([[(t.token, t.ref, t.dep) for t in s.tokens] for s in nlp.sentences])\n")),(0,o.kt)("p",null,"In the results you will find the token, possessive determiner and the dependency tag. For a full list of dependency tags and possessive determiners please check out our doc center for the documentation."),(0,o.kt)("h2",{id:"saving-your-results"},"Saving your results"),(0,o.kt)("p",null,"In order to save your results you can use the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"nlp.save_results(\u2018example_results')\n")),(0,o.kt)("p",null,"And a json file with your results that can be used for further analysis will be saved."),(0,o.kt)("h2",{id:"code-set"},"Code set"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import lettria\n\napi_key = \'your personal API key\'\nnlp = lettria.NLP(api_key)\n\nwith open("example.txt", "r") as f:\n    example_data = f.readlines()\n\nnlp.add_document(example_data)\n\nprint([[(t.token, t.ref, t.dep) for t in s.tokens] for s in nlp.sentences])\n\nnlp.save_results(\u2018example_results\')\n')))}c.isMDXComponent=!0}}]);