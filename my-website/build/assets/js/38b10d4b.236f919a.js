"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8640],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return y}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(n),y=a,m=u["".concat(p,".").concat(y)]||u[y]||c[y]||o;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8816:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={sidebar_position:2},p="Dependency Pattern",s={unversionedId:"Tutorials/Python SDK/Patterns/dependency-pattern",id:"version-2.0/Tutorials/Python SDK/Patterns/dependency-pattern",isDocsHomePage:!1,title:"Dependency Pattern",description:"Video",source:"@site/versioned_docs/version-2.0/Tutorials/Python SDK/Patterns/dependency-pattern.md",sourceDirName:"Tutorials/Python SDK/Patterns",slug:"/Tutorials/Python SDK/Patterns/dependency-pattern",permalink:"/documentation/docs/Tutorials/Python SDK/Patterns/dependency-pattern",tags:[],version:"2.0",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"version-2.0/tutorialSidebar",previous:{title:"Token Pattern",permalink:"/documentation/docs/Tutorials/Python SDK/Patterns/token-pattern"},next:{title:"FAQs",permalink:"/documentation/docs/help/faq"}},d=[{value:"Video",id:"video",children:[],level:2},{value:"What are dependency patterns?",id:"what-are-dependency-patterns",children:[],level:2},{value:"Importing the library &amp; your personal API key",id:"importing-the-library--your-personal-api-key",children:[],level:2},{value:"Creating a pattern",id:"creating-a-pattern",children:[],level:2},{value:"Adding data",id:"adding-data",children:[],level:2},{value:"Saving your results",id:"saving-your-results",children:[],level:2},{value:"Code set",id:"code-set",children:[],level:2}],c={toc:d};function u(e){var t=e.components,i=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"dependency-pattern"},"Dependency Pattern"),(0,o.kt)("h2",{id:"video"},"Video"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/8yLfty30axs",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:!0}),(0,o.kt)("h2",{id:"what-are-dependency-patterns"},"What are dependency patterns?"),(0,o.kt)("p",null,"Dependency patterns use dependency parsing which constructs a grammatical tree of the sentence to allow complex matching patterns."),(0,o.kt)("h2",{id:"importing-the-library--your-personal-api-key"},"Importing the library & your personal API key"),(0,o.kt)("p",null,"After you've installed the Lettria package on Python you'll need to import the library."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import lettria\n")),(0,o.kt)("p",null,"Next you are going to need to include your personal API key which can be found via the Lettria platform in the dashboard."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"api_key = 'your personal API key'\nnlp = lettria.NLP(api_key)\n")),(0,o.kt)("h2",{id:"creating-a-pattern"},"Creating a pattern"),(0,o.kt)("p",null,"In order to use dependency pattern you must first create the pattern."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'patterns = {\n    "supplies":\n        [\n            {\n            "RIGHT_ID": "rootnode",\n            "RIGHT_ATTRS": {"LEMMA": {"IN":["mask", "needle", "respirator"]}}\n            },\n            {\n            "LEFT_ID": "rootnode",\n            "REL_OP": ">",\n            "RIGHT_ID": "num",\n            "RIGHT_ATTRS": {"POS": "CD", "DEP":"nummod"}\n            }\n        ]\n}\n')),(0,o.kt)("p",null,"Attributes matching is similar to Token Patterns (Only exception is that for operators only the \u201c?\u201d is available) but there are also relation operators specific to dependency matching. Matching between the pattern and the sentence does not use the order of token (like for Token Patterns) but the dependency relations between tokens."),(0,o.kt)("p",null,"All fields must be completed except for the root node which only needs 'RIGHT_ID' and 'RIGHT_ATTRS' fields. Each pattern must have one root node."),(0,o.kt)("p",null,"Dependency matching should not be used on Subsentence since they don't have a complete dependency tree."),(0,o.kt)("p",null,"To see a complete list of dependency formats and relation operators you can refer to our documentation."),(0,o.kt)("h2",{id:"adding-data"},"Adding data"),(0,o.kt)("p",null,"Next add the data you would like to analyzed. I am going to add text but you can also upload a saved file with the with open command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"example_data = \u201cexample text\u201d\n")),(0,o.kt)("p",null,"Next add the data to the NLP."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"nlp.add_document(example_data)\n")),(0,o.kt)("p",null,"Extracting patterns"),(0,o.kt)("p",null,"In order to extract the patter I will use the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"for doc, matches in nlp.match_pattern(patterns):\n    print(matches)\n")),(0,o.kt)("p",null,"In the return you will find the corresponding values based on the dependencies defined in your pattern."),(0,o.kt)("h2",{id:"saving-your-results"},"Saving your results"),(0,o.kt)("p",null,"In order to save your results you can use the following command."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"nlp.save_results(\u2018example_results')\n")),(0,o.kt)("p",null,"And a json file with your results that can be used for further analysis will be saved."),(0,o.kt)("h2",{id:"code-set"},"Code set"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import lettria\n\napi_key = \'your personal API key\'\nnlp = lettria.NLP(api_key)\n\npatterns = {\n    "supplies":\n        [\n            {\n            "RIGHT_ID": "rootnode",\n            "RIGHT_ATTRS": {"LEMMA": {"IN":["mask", "needle", "respirator"]}}\n            },\n            {\n            "LEFT_ID": "rootnode",\n            "REL_OP": ">",\n            "RIGHT_ID": "num",\n            "RIGHT_ATTRS": {"POS": "CD", "DEP":"nummod"}\n            }\n        ]\n}\n\nexample_data = \u201cexample text\u201d\nnlp.add_document(example_data)\n\nfor doc, matches in nlp.match_pattern(patterns):\n    print(matches)\n\nnlp.save_results(\u2018example_results\')\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://app.lettria.com/signup"},(0,o.kt)("img",{alt:"register-sticky",src:n(4209).Z}))))}u.isMDXComponent=!0},4209:function(e,t,n){t.Z=n.p+"assets/images/register-sticky-0bf1e35cb49b633a37ddd712c2cfde47.png"}}]);